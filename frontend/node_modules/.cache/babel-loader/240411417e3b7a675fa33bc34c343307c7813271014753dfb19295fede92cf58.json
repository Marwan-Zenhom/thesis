{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\nexport const useConversations = userId => {\n  _s();\n  const [conversations, setConversations] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch conversations from database\n  const fetchConversations = async () => {\n    try {\n      setLoading(true);\n      const {\n        data,\n        error\n      } = await supabase.from('conversations').select(`\n          *,\n          messages (*)\n        `).eq('user_id', userId).order('created_at', {\n        ascending: false\n      });\n      if (error) throw error;\n      setConversations(data || []);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error fetching conversations:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create new conversation\n  const createConversation = async (title, messages = []) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('conversations').insert([{\n        user_id: userId,\n        title,\n        is_favourite: false,\n        is_archived: false\n      }]).select().single();\n      if (error) throw error;\n\n      // Add messages if provided\n      if (messages.length > 0) {\n        await addMessages(data.id, messages);\n      }\n      await fetchConversations(); // Refresh list\n      return data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Add messages to conversation\n  const addMessages = async (conversationId, messages) => {\n    try {\n      const messagesToInsert = messages.map(msg => ({\n        conversation_id: conversationId,\n        role: msg.role,\n        content: msg.content,\n        timestamp: msg.timestamp || new Date().toISOString(),\n        reaction: msg.reaction || null,\n        is_edited: msg.isEdited || false,\n        files: msg.files || null\n      }));\n      const {\n        error\n      } = await supabase.from('messages').insert(messagesToInsert);\n      if (error) throw error;\n      await fetchConversations(); // Refresh to get updated messages\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update conversation\n  const updateConversation = async (id, updates) => {\n    try {\n      const {\n        error\n      } = await supabase.from('conversations').update(updates).eq('id', id);\n      if (error) throw error;\n      await fetchConversations();\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Delete conversation\n  const deleteConversation = async id => {\n    try {\n      // Delete messages first (due to foreign key constraint)\n      await supabase.from('messages').delete().eq('conversation_id', id);\n\n      // Then delete conversation\n      const {\n        error\n      } = await supabase.from('conversations').delete().eq('id', id);\n      if (error) throw error;\n      await fetchConversations();\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n  useEffect(() => {\n    if (userId) {\n      fetchConversations();\n    }\n  }, [userId]); // fetchConversations is not included as it's redefined on every render\n\n  return {\n    conversations,\n    loading,\n    error,\n    createConversation,\n    addMessages,\n    updateConversation,\n    deleteConversation,\n    refreshConversations: fetchConversations\n  };\n};\n_s(useConversations, \"h5MS7IQmfDNXFlzmNFoXayhrc5s=\");","map":{"version":3,"names":["useState","useEffect","supabase","useConversations","userId","_s","conversations","setConversations","loading","setLoading","error","setError","fetchConversations","data","from","select","eq","order","ascending","err","message","console","createConversation","title","messages","insert","user_id","is_favourite","is_archived","single","length","addMessages","id","conversationId","messagesToInsert","map","msg","conversation_id","role","content","timestamp","Date","toISOString","reaction","is_edited","isEdited","files","updateConversation","updates","update","deleteConversation","delete","refreshConversations"],"sources":["/Users/marwan.zenhom/Desktop/onboarding-chat/frontend/src/hooks/useConversations.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\n\nexport const useConversations = (userId) => {\n  const [conversations, setConversations] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch conversations from database\n  const fetchConversations = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('conversations')\n        .select(`\n          *,\n          messages (*)\n        `)\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      setConversations(data || []);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error fetching conversations:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create new conversation\n  const createConversation = async (title, messages = []) => {\n    try {\n      const { data, error } = await supabase\n        .from('conversations')\n        .insert([{\n          user_id: userId,\n          title,\n          is_favourite: false,\n          is_archived: false\n        }])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Add messages if provided\n      if (messages.length > 0) {\n        await addMessages(data.id, messages);\n      }\n\n      await fetchConversations(); // Refresh list\n      return data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Add messages to conversation\n  const addMessages = async (conversationId, messages) => {\n    try {\n      const messagesToInsert = messages.map(msg => ({\n        conversation_id: conversationId,\n        role: msg.role,\n        content: msg.content,\n        timestamp: msg.timestamp || new Date().toISOString(),\n        reaction: msg.reaction || null,\n        is_edited: msg.isEdited || false,\n        files: msg.files || null\n      }));\n\n      const { error } = await supabase\n        .from('messages')\n        .insert(messagesToInsert);\n\n      if (error) throw error;\n      await fetchConversations(); // Refresh to get updated messages\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update conversation\n  const updateConversation = async (id, updates) => {\n    try {\n      const { error } = await supabase\n        .from('conversations')\n        .update(updates)\n        .eq('id', id);\n\n      if (error) throw error;\n      await fetchConversations();\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Delete conversation\n  const deleteConversation = async (id) => {\n    try {\n      // Delete messages first (due to foreign key constraint)\n      await supabase.from('messages').delete().eq('conversation_id', id);\n      \n      // Then delete conversation\n      const { error } = await supabase\n        .from('conversations')\n        .delete()\n        .eq('id', id);\n\n      if (error) throw error;\n      await fetchConversations();\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  useEffect(() => {\n    if (userId) {\n      fetchConversations();\n    }\n  }, [userId]); // fetchConversations is not included as it's redefined on every render\n\n  return {\n    conversations,\n    loading,\n    error,\n    createConversation,\n    addMessages,\n    updateConversation,\n    deleteConversation,\n    refreshConversations: fetchConversations\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}