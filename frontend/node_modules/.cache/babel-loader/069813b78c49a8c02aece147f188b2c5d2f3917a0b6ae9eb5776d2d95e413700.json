{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || `HTTP error! status: ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Chat endpoints\n  async sendMessage(message, conversationId = null, files = null) {\n    return this.request('/api/chat/message', {\n      method: 'POST',\n      body: JSON.stringify({\n        message,\n        conversationId,\n        files\n      })\n    });\n  }\n  async regenerateResponse(conversationId, messageId) {\n    return this.request('/api/chat/regenerate', {\n      method: 'POST',\n      body: JSON.stringify({\n        conversationId,\n        messageId\n      })\n    });\n  }\n  async getConversations() {\n    return this.request('/api/chat/conversations');\n  }\n  async updateConversation(id, updates) {\n    return this.request(`/api/chat/conversations/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates)\n    });\n  }\n  async deleteConversation(id) {\n    return this.request(`/api/chat/conversations/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.request('/api/health');\n  }\n}\nexport const apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseURL","request","endpoint","options","url","config","headers","response","fetch","data","json","ok","Error","error","status","console","sendMessage","message","conversationId","files","method","body","JSON","stringify","regenerateResponse","messageId","getConversations","updateConversation","id","updates","deleteConversation","healthCheck","apiService"],"sources":["/Users/marwan.zenhom/Desktop/onboarding-chat/frontend/src/services/apiService.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || `HTTP error! status: ${response.status}`);\n      }\n\n      return data;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Chat endpoints\n  async sendMessage(message, conversationId = null, files = null) {\n    return this.request('/api/chat/message', {\n      method: 'POST',\n      body: JSON.stringify({\n        message,\n        conversationId,\n        files\n      }),\n    });\n  }\n\n  async regenerateResponse(conversationId, messageId) {\n    return this.request('/api/chat/regenerate', {\n      method: 'POST',\n      body: JSON.stringify({\n        conversationId,\n        messageId\n      }),\n    });\n  }\n\n  async getConversations() {\n    return this.request('/api/chat/conversations');\n  }\n\n  async updateConversation(id, updates) {\n    return this.request(`/api/chat/conversations/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates),\n    });\n  }\n\n  async deleteConversation(id) {\n    return this.request(`/api/chat/conversations/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.request('/api/health');\n  }\n}\n\nexport const apiService = new ApiService();\nexport default apiService; "],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAGN,YAAY;EAC7B;EAEA,MAAMO,OAAOA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACpC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,OAAO,GAAGE,QAAQ,EAAE;IAExC,MAAMG,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACD,GAAGH;IACL,CAAC;IAED,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAEC,MAAM,CAAC;MACzC,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,uBAAuBN,QAAQ,CAACO,MAAM,EAAE,CAAC;MACzE;MAEA,OAAOL,IAAI;IACb,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdE,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMG,WAAWA,CAACC,OAAO,EAAEC,cAAc,GAAG,IAAI,EAAEC,KAAK,GAAG,IAAI,EAAE;IAC9D,OAAO,IAAI,CAAClB,OAAO,CAAC,mBAAmB,EAAE;MACvCmB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBN,OAAO;QACPC,cAAc;QACdC;MACF,CAAC;IACH,CAAC,CAAC;EACJ;EAEA,MAAMK,kBAAkBA,CAACN,cAAc,EAAEO,SAAS,EAAE;IAClD,OAAO,IAAI,CAACxB,OAAO,CAAC,sBAAsB,EAAE;MAC1CmB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBL,cAAc;QACdO;MACF,CAAC;IACH,CAAC,CAAC;EACJ;EAEA,MAAMC,gBAAgBA,CAAA,EAAG;IACvB,OAAO,IAAI,CAACzB,OAAO,CAAC,yBAAyB,CAAC;EAChD;EAEA,MAAM0B,kBAAkBA,CAACC,EAAE,EAAEC,OAAO,EAAE;IACpC,OAAO,IAAI,CAAC5B,OAAO,CAAC,2BAA2B2B,EAAE,EAAE,EAAE;MACnDR,MAAM,EAAE,KAAK;MACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACM,OAAO;IAC9B,CAAC,CAAC;EACJ;EAEA,MAAMC,kBAAkBA,CAACF,EAAE,EAAE;IAC3B,OAAO,IAAI,CAAC3B,OAAO,CAAC,2BAA2B2B,EAAE,EAAE,EAAE;MACnDR,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMW,WAAWA,CAAA,EAAG;IAClB,OAAO,IAAI,CAAC9B,OAAO,CAAC,aAAa,CAAC;EACpC;AACF;AAEA,OAAO,MAAM+B,UAAU,GAAG,IAAIlC,UAAU,CAAC,CAAC;AAC1C,eAAekC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}